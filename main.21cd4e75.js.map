{"version":3,"sources":["js/modules/serverComm.js","js/modules/helpers.js","js/modules/gameField.js","js/main.js"],"names":["serverComm","URL","fieldData","response","fetch","method","body","JSON","stringify","result","json","document","querySelector","removeElem","elemClass","remove","setSessionGridArray","array","sessionStorage","setItem","getSessionGridArray","parse","getItem","Cell","x","y","z","value","generateField","elemCoefficient","fieldSize","gridArray","counter","i","j","k","push","drawGrid","field","fieldWidth","offsetWidth","fieldHeigth","offsetHeight","cellWidth","toFixed","cellHeigth","Math","sqrt","divElem","createElement","className","innerHTML","cellClass","posX","posY","centerX","centerY","length","append","updateCells","dataArray","forEach","element","data","hexGridArray","initField","inputRadius","parseInt","getRowArray","axis","index","rowArray","getMovedRow","direction","initialArray","filteredInitArr","filter","elem","valuesArray","map","countZeroes","zeroesArray","Array","fill","newArray","moveArr","entries","getCalculatedRow","initArr","console","log","getUpdate","fieldRadius","indexArr","movedHexGridArray","calculatedHexGridArray","updatedHexGridArray","indexVal","movedRow","calculatedRow","baseURL","initialDataReq","target","reqURL","then","logKey","e","code","getDirection","addEventListener","closest"],"mappings":"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","file":"main.21cd4e75.js","sourceRoot":"..","sourcesContent":["async function serverComm(URL, fieldData) {\r\n  let response = await fetch(URL, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(fieldData),\r\n  });\r\n\r\n  let result = await response.json();\r\n  // console.log(result);\r\n  return result;\r\n}\r\n\r\nexport default serverComm;\r\n","const body = document.querySelector(\"body\");\r\n\r\nfunction removeElem(elemClass) {\r\n  if (!!body.querySelector(elemClass)) {\r\n    body.querySelector(elemClass).remove();\r\n  }\r\n}\r\n\r\nfunction setSessionGridArray(array) {\r\n  sessionStorage.setItem(\"hexGridArray\", JSON.stringify(array));\r\n}\r\n\r\nfunction getSessionGridArray() {\r\n  return JSON.parse(sessionStorage.getItem(\"hexGridArray\"));\r\n}\r\n\r\nexport { removeElem, setSessionGridArray, getSessionGridArray };\r\n","import {\r\n  removeElem,\r\n  setGridArray,\r\n  getGridArray\r\n} from \"./helpers\";\r\n\r\nfunction Cell(x, y, z, value) {\r\n  this.x = x;\r\n  this.y = y;\r\n  this.z = z;\r\n  this.value = value;\r\n}\r\n\r\nfunction generateField(elemCoefficient) {\r\n  const fieldSize = elemCoefficient;\r\n  const gridArray = [];\r\n  let counter = 0;\r\n\r\n  for (let i = -fieldSize; i < fieldSize + 1; i += 1) {\r\n    for (let j = -fieldSize; j < fieldSize + 1; j += 1) {\r\n      for (let k = -fieldSize; k < fieldSize + 1; k += 1) {\r\n        if (i + j + k == 0) {\r\n          gridArray.push(new Cell(i, j, k, 0));\r\n          counter += 1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // console.log(gridArray);\r\n  return gridArray;\r\n}\r\n\r\nfunction drawGrid(gridArray, elemCoefficient) {\r\n  const field = document.querySelector(\".game-field\");\r\n  const fieldWidth = field.offsetWidth;\r\n  const fieldHeigth = field.offsetHeight;\r\n\r\n  const elemRadius = elemCoefficient * 2 - 1;\r\n  const cellSize = fieldWidth / (elemCoefficient * 4 + 1);\r\n\r\n  const cellWidth = (cellSize * 2).toFixed(2);\r\n  const cellHeigth = ((cellWidth * Math.sqrt(3)) / 2).toFixed(2);\r\n  const divElem = document.createElement(\"div\");\r\n  divElem.className = \"hex-grid\";\r\n  divElem.innerHTML = ``;\r\n\r\n  let cellClass = \"css-2\";\r\n\r\n  switch (elemCoefficient) {\r\n    case 2:\r\n      cellClass = \"css-3\";\r\n      break;\r\n    case 3:\r\n      cellClass = \"css-4\";\r\n  }\r\n\r\n  let x, y, z, value;\r\n  let posX, posY;\r\n  let centerX = fieldWidth / 2;\r\n  let centerY = fieldHeigth / 2;\r\n\r\n  for (let i = 0; i < gridArray.length; i++) {\r\n    [x, y, z, value] = [\r\n      gridArray[i].x,\r\n      gridArray[i].y,\r\n      gridArray[i].z,\r\n      gridArray[i].value,\r\n    ];\r\n    posX = (x * 3 * cellWidth) / 4 + centerX - cellWidth / 2;\r\n    posY = ((-y + z) * cellHeigth) / 2 + centerY - cellHeigth / 2;\r\n    divElem.innerHTML += `\r\n    <div class=\"${cellClass}\" \r\n      data-value=\"${value}\" \r\n      data-x=\"${x}\" \r\n      data-y=\"${y}\" \r\n      data-z=\"${z}\" \r\n      style=\"left: ${posX}px; top: ${posY}px;\">${value || \"\"}</div>\r\n    `;\r\n  }\r\n  removeElem(\".hex-grid\");\r\n  field.append(divElem);\r\n}\r\n\r\nfunction updateCells(gridArray, dataArray) {\r\n  gridArray.forEach((element) => {\r\n    dataArray.forEach((data) => {\r\n      const result =\r\n        element.x === data.x && element.y === data.y && element.z === data.z;\r\n      if (!!result) {\r\n        element.value = data.value;\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nlet elemCoefficient = 1;\r\nlet hexGridArray = [];\r\n\r\nfunction initField(inputRadius, data) {\r\n  elemCoefficient = parseInt(inputRadius) - 1;\r\n  hexGridArray = generateField(elemCoefficient);\r\n  updateCells(hexGridArray, data);\r\n  // setGridArray(hexGridArray);\r\n  drawGrid(hexGridArray, elemCoefficient);\r\n}\r\n\r\nfunction getRowArray(axis, index, array) {\r\n  const rowArray = [];\r\n  array.forEach((element) => {\r\n    if (element[axis] === index) {\r\n      rowArray.push(element);\r\n    }\r\n  });\r\n  return rowArray;\r\n}\r\n\r\n// **\r\n// direction Boolean  - true for positive / false for negative\r\n\r\nfunction getMovedRow(rowArray, direction) {\r\n  const initialArray = [...rowArray];\r\n  const filteredInitArr = initialArray.filter(elem => elem.value > 0);\r\n  const valuesArray = filteredInitArr.length && filteredInitArr.map(elem => elem.value) || [];\r\n  const countZeroes = initialArray.length - valuesArray.length;\r\n  const zeroesArray = new Array(countZeroes).fill(0);\r\n  let newArray;\r\n  if (!direction) {\r\n    newArray = [...valuesArray, ...zeroesArray];\r\n  } else {\r\n    newArray = [...zeroesArray, ...valuesArray];\r\n  }\r\n  const moveArr = [...rowArray];\r\n  for (const [index, value] of moveArr.entries()) {\r\n    value.value = newArray[index];\r\n  }\r\n  return moveArr;\r\n}\r\n\r\nfunction getCalculatedRow(rowArray, direction) {\r\n  const initArr = [...rowArray];\r\n  console.log(`111: ${JSON.stringify(initArr)}`);\r\n  if (!direction) {\r\n    for (let i = 1; i < initArr.length; i++) {\r\n      if (initArr[i - 1].value === initArr[i].value) {\r\n        initArr[i - 1].value += initArr[i].value;\r\n        initArr[i].value = 0;\r\n      }\r\n    }\r\n  } else {\r\n    for (let i = initArr.length - 1; i >= 0; i--) {\r\n      if (initArr[i + 1].value === 0) {\r\n        initArr[i + 1].value += initArr[i].value;\r\n        initArr[i].value = 0;\r\n      }\r\n    }\r\n  }\r\n  console.log(`222: ${JSON.stringify(initArr)}`);\r\n  return initArr;\r\n}\r\n\r\nfunction getUpdate(axis, fieldRadius, direction) {\r\n  const indexArr = [];\r\n  for (let i = -fieldRadius + 1; i < fieldRadius; i++) {\r\n    indexArr.push(i);\r\n  }\r\n  let movedHexGridArray = [];\r\n  let calculatedHexGridArray = [];\r\n  let updatedHexGridArray = [];\r\n\r\n  for (let indexVal of indexArr) {\r\n    let rowArray = getRowArray(axis, indexVal, hexGridArray);\r\n    let movedRow = getMovedRow(rowArray, direction);\r\n    movedHexGridArray.push(...movedRow);\r\n  }\r\n\r\n  for (let indexVal of indexArr) {\r\n    let rowArray = getRowArray(axis, indexVal, movedHexGridArray);\r\n    let calculatedRow = getCalculatedRow(rowArray, direction);\r\n    calculatedHexGridArray.push(...calculatedRow);\r\n  }\r\n\r\n  for (let indexVal of indexArr) {\r\n    let rowArray = getRowArray(axis, indexVal, calculatedHexGridArray);\r\n    let movedRow = getMovedRow(rowArray, direction);\r\n    updatedHexGridArray.push(...movedRow);\r\n  }\r\n\r\n  console.log(`333: ${JSON.stringify(hexGridArray)}`);\r\n  console.log(`444: ${JSON.stringify(updatedHexGridArray)}`);\r\n  drawGrid(updatedHexGridArray, elemCoefficient);\r\n}\r\n\r\nexport {\r\n  initField,\r\n  updateCells,\r\n  drawGrid,\r\n  getUpdate\r\n};\r\n","import serverComm from \"./modules/serverComm\";\r\nimport { initField as gameField, getUpdate } from \"./modules/gameField\";\r\n\r\nconst baseURL = \"http://51.15.207.127:13337\";\r\nlet fieldData = [];\r\nlet fieldRadius;\r\n\r\nconst body = document.querySelector(\"body\");\r\nbody.addEventListener(\"click\", function (e) {\r\n  const target = e.target;\r\n  if (!!target.closest(\".radius-btn\")) {\r\n    fieldRadius = target.value;\r\n    initialDataReq(target);\r\n  }\r\n});\r\n\r\nfunction initialDataReq(target) {\r\n  const reqURL = `${baseURL}/${target.value}`;\r\n\r\n  serverComm(reqURL, fieldData).then((result) =>\r\n    gameField(target.value, result)\r\n  );\r\n}\r\n\r\nfunction logKey(e) {\r\n  console.log(e.code);\r\n}\r\n\r\ndocument.addEventListener(\"keydown\", getDirection);\r\n\r\nfunction getDirection(e) {\r\n  logKey(e);\r\n  let direction;\r\n\r\n  switch (e.code) {\r\n    case \"KeyW\":\r\n      // direction = \"x+\";\r\n      getUpdate(\"x\", fieldRadius, true);\r\n      break;\r\n    case \"KeyS\":\r\n      // direction = \"x-\";\r\n      getUpdate(\"x\", fieldRadius, false);\r\n      break;\r\n    case \"KeyE\":\r\n      // direction = \"y+\";\r\n      getUpdate(\"y\", fieldRadius, true);\r\n      break;\r\n    case \"KeyA\":\r\n      // direction = \"y-\";\r\n      getUpdate(\"y\", fieldRadius, false);\r\n      break;\r\n    case \"KeyD\":\r\n      // direction = \"z+\";\r\n      getUpdate(\"z\", fieldRadius, true);\r\n      break;\r\n    case \"KeyQ\":\r\n      // direction = \"z-\";\r\n      getUpdate(\"z\", fieldRadius, false);\r\n      break;\r\n    default:\r\n      return;\r\n  }\r\n}\r\n"]}