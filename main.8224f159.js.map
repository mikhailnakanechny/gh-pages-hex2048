{"version":3,"sources":["js/modules/serverComm.js","js/modules/helpers.js","js/modules/gameField.js","js/main.js"],"names":["serverComm","URL","fieldData","response","fetch","method","body","JSON","stringify","result","json","console","log","document","querySelector","removeElem","elemClass","remove","setSessionGridArray","array","sessionStorage","setItem","getSessionGridArray","parse","getItem","gameURL","normalArray","elemCoefficient","hexGridArray","gameOver","generateField","fieldSize","gridArray","i","j","k","push","value","drawGrid","field","fieldWidth","offsetWidth","fieldHeight","offsetHeight","cellWidth","toFixed","cellHeight","Math","sqrt","divElem","createElement","className","innerHTML","cellClass","x","y","z","posX","posY","centerX","centerY","length","append","updateCells","dataArray","forEach","element","data","initField","inputRadius","reqURL","parseInt","getRowArray","axis","index","rowArray","getMovedRow","direction","moveArr","filteredInitArr","filter","elem","valuesArray","map","countZeroes","zeroesArray","Array","fill","newArray","entries","getCalculatedRow","initArr","normalizeGridArray","incomingArray","normalizedArray","findIndex","item","splice","getIndexArr","fieldRadius","indexArr","generateNewArray","resultArray","changeFunction","rawArray","indexVal","bufferRow","getUpdate","movedHexGridArray","calculatedHexGridArray","updatedHexGridArray","arguments","isEqualArr","addNewCellData","then","gameOverCheck","count","arr1","arr2","baseURL","initialDataReq","target","logKey","e","code","getDirection","addEventListener","closest"],"mappings":"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","file":"main.8224f159.js","sourceRoot":"..","sourcesContent":["async function serverComm(URL, fieldData) {\r\n  let response = await fetch(URL, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(fieldData),\r\n  });\r\n\r\n  let result = await response.json();\r\n  console.log(JSON.stringify(result));\r\n  return result;\r\n}\r\n\r\nexport {\r\n  serverComm\r\n};\r\n","const body = document.querySelector(\"body\");\r\n\r\nfunction removeElem(elemClass) {\r\n  if (!!body.querySelector(elemClass)) {\r\n    body.querySelector(elemClass).remove();\r\n  }\r\n}\r\n\r\nfunction setSessionGridArray(array) {\r\n  sessionStorage.setItem(\"hexGridArray\", JSON.stringify(array));\r\n}\r\n\r\nfunction getSessionGridArray() {\r\n  return JSON.parse(sessionStorage.getItem(\"hexGridArray\"));\r\n}\r\n\r\nexport { removeElem, setSessionGridArray, getSessionGridArray };\r\n","import {\r\n  removeElem\r\n} from \"./helpers\";\r\nimport {\r\n  serverComm\r\n} from \"./serverComm\";\r\n\r\nlet elemCoefficient = 1;\r\nlet hexGridArray = [];\r\nlet gameURL;\r\nlet gameOver = false;\r\nlet normalArray;\r\n\r\nfunction generateField(elemCoefficient) {\r\n  const fieldSize = elemCoefficient;\r\n  const gridArray = [];\r\n  const value = 0;\r\n  for (let i = -fieldSize; i < fieldSize + 1; i++) {\r\n    for (let j = fieldSize; j > -fieldSize - 1; j--) {\r\n      for (let k = fieldSize; k > -fieldSize -1; k--) {\r\n        if (i + j + k == 0) {\r\n          gridArray.push({\r\n            'x': i,\r\n            'y': j,\r\n            'z': k,\r\n            'value': value,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return gridArray;\r\n}\r\n\r\nfunction drawGrid(gridArray, elemCoefficient) {\r\n  const field = document.querySelector(\".game-field\");\r\n  const fieldWidth = field.offsetWidth;\r\n  const fieldHeight = field.offsetHeight;\r\n\r\n  const elemRadius = elemCoefficient * 2 - 1;\r\n  const cellSize = fieldWidth / (elemCoefficient * 4 + 1);\r\n\r\n  const cellWidth = (cellSize * 2).toFixed(2);\r\n  const cellHeight = ((cellWidth * Math.sqrt(3)) / 2).toFixed(2);\r\n  const divElem = document.createElement(\"div\");\r\n  divElem.className = \"hex-grid\";\r\n  divElem.innerHTML = ``;\r\n\r\n  let cellClass = \"css-2\";\r\n\r\n  switch (elemCoefficient) {\r\n    case 2:\r\n      cellClass = \"css-3\";\r\n      break;\r\n    case 3:\r\n      cellClass = \"css-4\";\r\n  }\r\n\r\n  let x, y, z, value;\r\n  let posX, posY;\r\n  let centerX = fieldWidth / 2;\r\n  let centerY = fieldHeight / 2;\r\n\r\n  for (let i = 0; i < gridArray.length; i++) {\r\n    [x, y, z, value] = [\r\n      gridArray[i].x,\r\n      gridArray[i].y,\r\n      gridArray[i].z,\r\n      gridArray[i].value,\r\n    ];\r\n    posX = (x * 3 * cellWidth) / 4 + centerX - cellWidth / 2;\r\n    posY = ((z - y) * cellHeight) / 2 + centerY - cellHeight / 2;\r\n    divElem.innerHTML += `\r\n    <div class=\"${cellClass}\" \r\n      data-value=\"${value}\" \r\n      data-x=\"${x}\" \r\n      data-y=\"${y}\" \r\n      data-z=\"${z}\" \r\n      style=\"left: ${posX}px; top: ${posY}px;\">${value || \"\"}</div>\r\n    `;\r\n  }\r\n  if (!!document.querySelector(\".hex-grid\")) {\r\n    removeElem(\".hex-grid\");\r\n  }\r\n  field.append(divElem);\r\n  document.querySelector(\".game-status\").innerHTML = `Game Status: ${gameOver ? 'Game Over' : 'Playing'}`;\r\n}\r\n\r\nfunction updateCells(gridArray, dataArray) {\r\n  gridArray.forEach((element) => {\r\n    dataArray.forEach((data) => {\r\n      const result =\r\n        element.x === data.x && element.y === data.y && element.z === data.z;\r\n      if (!!result) {\r\n        element.value = data.value;\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n\r\n\r\nfunction initField(inputRadius, data, reqURL) {\r\n  elemCoefficient = parseInt(inputRadius) - 1;\r\n  hexGridArray = generateField(elemCoefficient);\r\n  normalArray = JSON.parse(JSON.stringify(hexGridArray));\r\n  gameURL = reqURL;\r\n  updateCells(hexGridArray, data);\r\n  drawGrid(hexGridArray, elemCoefficient);\r\n  return hexGridArray;\r\n}\r\n\r\nfunction getRowArray(axis, index, array) {\r\n  const rowArray = [];\r\n  array.forEach((element) => {\r\n    if (element[axis] === index) {\r\n      rowArray.push(element);\r\n    }\r\n  });\r\n  return rowArray;\r\n}\r\n\r\n// **\r\n// direction Boolean  - true for positive / false for negative\r\nfunction getMovedRow(rowArray, direction, axis) {\r\n  const moveArr = JSON.parse(JSON.stringify(rowArray));\r\n  const filteredInitArr = moveArr.filter(elem => elem.value > 0);\r\n  if (!filteredInitArr.length) return moveArr;\r\n  const valuesArray = filteredInitArr.length && filteredInitArr.map(elem => elem.value) || [];\r\n  const countZeroes = moveArr.length - valuesArray.length;\r\n  const zeroesArray = new Array(countZeroes).fill(0);\r\n  const newArray = direction ? [...valuesArray, ...zeroesArray] : [...zeroesArray, ...valuesArray];\r\n  for (const [index, value] of moveArr.entries()) {\r\n    console.log(axis, index, newArray[index]);\r\n    value.value = newArray[index];\r\n  }\r\n  return moveArr;\r\n}\r\n\r\nfunction getCalculatedRow(rowArray, direction) {\r\n  const initArr = JSON.parse(JSON.stringify(rowArray));\r\n  if (direction) {\r\n    for (let i = initArr.length - 1; i > 0; i--) {\r\n      if (initArr[i].value === initArr[i - 1].value) {\r\n        initArr[i].value += initArr[i - 1].value;\r\n        initArr[i - 1].value = 0;\r\n      }\r\n    }\r\n  } else {\r\n    for (let i = 1; i < initArr.length; i++) {\r\n      if (initArr[i - 1].value === initArr[i].value) {\r\n        initArr[i - 1].value += initArr[i].value;\r\n        initArr[i].value = 0;\r\n      }\r\n    }\r\n  }\r\n  return initArr;\r\n}\r\n\r\nfunction normalizeGridArray(incomingArray) {\r\n  let normalizedArray = [];\r\n  incomingArray.forEach(elem => {\r\n    const index = normalArray.findIndex((item) => {\r\n      item.x == elem.x && item.y == elem.y && item.z == elem.z;\r\n    });\r\n    normalizedArray.splice(index, 0, elem);\r\n  });\r\n  return normalizedArray;\r\n}\r\n\r\nfunction getIndexArr(fieldRadius) {\r\n  const indexArr = [];\r\n  for (let i = -fieldRadius + 1; i < fieldRadius; i++) {\r\n    indexArr.push(i);\r\n  }\r\n  return indexArr;\r\n}\r\n\r\nfunction generateNewArray(axis, fieldRadius, direction, incomingArray, resultArray, changeFunction) {\r\n  const indexArr = getIndexArr(fieldRadius);\r\n  const rawArray = [];\r\n  for (let indexVal of indexArr) {\r\n    let rowArray = getRowArray(axis, indexVal, incomingArray);\r\n    let bufferRow = changeFunction(rowArray, direction, axis);\r\n    rawArray.push(...bufferRow);\r\n  }\r\n  let normalizedArray = normalizeGridArray(rawArray);\r\n  resultArray.push(...normalizedArray);\r\n}\r\n\r\nfunction getUpdate(axis, fieldRadius, direction) {\r\n  let movedHexGridArray = [];\r\n  let calculatedHexGridArray = [];\r\n  let updatedHexGridArray = [];\r\n  console.log(JSON.stringify(hexGridArray));\r\n  console.log(JSON.stringify(normalArray));\r\n  generateNewArray(...arguments, hexGridArray, movedHexGridArray, getMovedRow);\r\n  console.log(JSON.stringify(movedHexGridArray));\r\n  generateNewArray(...arguments, movedHexGridArray, calculatedHexGridArray, getCalculatedRow);\r\n  // check changes in cells array\r\n  if (isEqualArr(calculatedHexGridArray, hexGridArray)) {\r\n    return;\r\n  }\r\n\r\n  generateNewArray(...arguments, calculatedHexGridArray, updatedHexGridArray, getMovedRow);\r\n  console.log(JSON.stringify(updatedHexGridArray));\r\n\r\n  addNewCellData(updatedHexGridArray).then(result => {\r\n    hexGridArray = result;\r\n    gameOver = gameOverCheck(hexGridArray, fieldRadius);\r\n    drawGrid(hexGridArray, elemCoefficient);\r\n  });\r\n}\r\n\r\nfunction addNewCellData(incomingArray) {\r\n  let newArray = serverComm(gameURL, incomingArray.filter(elem => elem.value > 0)).then(result => {\r\n    incomingArray.map(elem => {\r\n      result.forEach(data => {\r\n        const result =\r\n          elem.x === data.x && elem.y === data.y && elem.z === data.z;\r\n        if (!!result) {\r\n          elem.value = data.value;\r\n        }\r\n      });\r\n    });\r\n    return incomingArray;\r\n  })\r\n  return newArray;\r\n}\r\n\r\nfunction gameOverCheck(incomingArray, fieldRadius) {\r\n  let count = 0;\r\n  const indexArr = getIndexArr(fieldRadius)\r\n\r\n  for (let axis of ['x', 'y', 'z'])\r\n    for (let indexVal of indexArr) {\r\n      let rowArray = getRowArray(axis, indexVal, incomingArray);\r\n      for (let i = 1; i < rowArray.length; i++) {\r\n        if (rowArray[i].value === rowArray[i - 1].value || rowArray[i].value === 0) {\r\n          count++\r\n        };\r\n      }\r\n    }\r\n  return !count;\r\n}\r\n\r\nfunction isEqualArr(arr1, arr2) {\r\n  for (let i = 0; i < arr1.length; ++i) {\r\n    if (JSON.stringify(arr1[i]) != JSON.stringify(arr2[i])) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport {\r\n  initField,\r\n  updateCells,\r\n  drawGrid,\r\n  getUpdate\r\n};\r\n","import {\r\n  serverComm\r\n} from \"./modules/serverComm\";\r\nimport {\r\n  initField as gameField,\r\n  getUpdate\r\n} from \"./modules/gameField\";\r\n\r\nconst baseURL = \"http://51.15.207.127:13337\";\r\nlet fieldData = [];\r\nlet fieldRadius;\r\nlet hexGridArray = [];\r\n\r\nconst body = document.querySelector(\"body\");\r\nbody.addEventListener(\"click\", function (e) {\r\n  const target = e.target;\r\n  if (!!target.closest(\".radius-btn\")) {\r\n    fieldRadius = target.value;\r\n    initialDataReq(target);\r\n  }\r\n});\r\n\r\nfunction initialDataReq(target) {\r\n  const reqURL = `${baseURL}/${target.value}`;\r\n\r\n  serverComm(reqURL, fieldData).then((result) =>\r\n    hexGridArray = gameField(target.value, result, reqURL)\r\n  );\r\n}\r\n\r\nfunction logKey(e) {\r\n  console.log(e.code);\r\n}\r\n\r\nfunction getDirection(e) {\r\n  logKey(e);\r\n  switch (e.code) {\r\n    case \"KeyW\":\r\n      hexGridArray = getUpdate(\"x\", fieldRadius, 1);\r\n      break;\r\n    case \"KeyS\":\r\n      hexGridArray = getUpdate(\"x\", fieldRadius, 0);\r\n      break;\r\n    case \"KeyE\":\r\n      hexGridArray = getUpdate(\"y\", fieldRadius, 0);\r\n      break;\r\n    case \"KeyA\":\r\n      hexGridArray = getUpdate(\"y\", fieldRadius, 1);\r\n      break;\r\n    case \"KeyQ\":\r\n      hexGridArray = getUpdate(\"z\", fieldRadius, 1);\r\n      break;\r\n    case \"KeyD\":\r\n      hexGridArray = getUpdate(\"z\", fieldRadius, 0);\r\n      break;\r\n    default:\r\n      return;\r\n  }\r\n}\r\n\r\ndocument.addEventListener(\"keydown\", getDirection);\r\n"]}