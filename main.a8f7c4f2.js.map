{"version":3,"sources":["js/modules/serverComm.js","js/modules/helpers.js","js/modules/grawGrid.js","js/modules/gameField.js","js/main.js"],"names":["serverComm","URL","fieldData","response","fetch","method","body","JSON","stringify","result","json","document","querySelector","removeElem","elemClass","remove","setSessionGridArray","array","sessionStorage","setItem","getSessionGridArray","parse","getItem","getRowArray","axis","index","rowArray","forEach","element","push","normalizeGridArray","incomingArray","normalArray","normalizedArray","elem","some","item","i","x","y","z","splice","getIndexArr","fieldRadius","indexArr","isEqualArr","arr1","arr2","length","drawGrid","gridArray","elemCoefficient","gameOver","field","fieldWidth","offsetWidth","fieldHeight","offsetHeight","cellWidth","toFixed","cellHeight","Math","sqrt","divElem","createElement","className","innerHTML","cellClass","value","posX","posY","centerX","centerY","append","gameURL","hexGridArray","initField","inputRadius","data","reqURL","parseInt","generateField","updateCells","fieldSize","j","k","dataArray","getMovedRow","direction","moveArr","filteredInitArr","filter","valuesArray","map","countZeroes","zeroesArray","Array","fill","newArray","entries","getCalculatedRow","initArr","generateNewArray","resultArray","changeFunction","rawArray","indexVal","bufferRow","getUpdate","options","movedHexGridArray","calculatedHexGridArray","updatedHexGridArray","addNewCellData","then","gameOverCheck","count","baseURL","initialDataReq","target","getDirection","e","code","addEventListener","closest"],"mappings":"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","file":"main.a8f7c4f2.js","sourceRoot":"..","sourcesContent":["async function serverComm(URL, fieldData) {\r\n  let response = await fetch(URL, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(fieldData),\r\n  });\r\n\r\n  let result = await response.json();\r\n  // console.log(JSON.stringify(result));\r\n  return result;\r\n}\r\n\r\nexport default serverComm;\r\n\r\n","const body = document.querySelector(\"body\");\r\n\r\nfunction removeElem(elemClass) {\r\n  if (!!body.querySelector(elemClass)) {\r\n    body.querySelector(elemClass).remove();\r\n  }\r\n}\r\n\r\nfunction setSessionGridArray(array) {\r\n  sessionStorage.setItem(\"hexGridArray\", JSON.stringify(array));\r\n}\r\n\r\nfunction getSessionGridArray() {\r\n  return JSON.parse(sessionStorage.getItem(\"hexGridArray\"));\r\n}\r\n\r\nfunction getRowArray(axis, index, array) {\r\n  const rowArray = [];\r\n  array.forEach((element) => {\r\n    if (element[axis] === index) {\r\n      rowArray.push(element);\r\n    }\r\n  });\r\n  return rowArray;\r\n}\r\n\r\nfunction normalizeGridArray(incomingArray, normalArray) {\r\n  let normalizedArray = [];\r\n  incomingArray.forEach(elem => {\r\n    let index;\r\n\r\n    normalArray.some(function (item, i) {\r\n        return (item.x == elem.x && item.y == elem.y && item.z == elem.z) && ~(index = i);\r\n      });\r\n    normalizedArray.splice(index, 0, elem);\r\n  });\r\n  return normalizedArray;\r\n}\r\n\r\nfunction getIndexArr(fieldRadius) {\r\n  const indexArr = [];\r\n  for (let i = -fieldRadius + 1; i < fieldRadius; i++) {\r\n    indexArr.push(i);\r\n  }\r\n  return indexArr;\r\n}\r\n\r\nfunction isEqualArr(arr1, arr2) {\r\n  for (let i = 0; i < arr1.length; ++i) {\r\n    if (JSON.stringify(arr1[i]) != JSON.stringify(arr2[i])) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport {\r\n  removeElem,\r\n  setSessionGridArray,\r\n  getSessionGridArray,\r\n  getRowArray,\r\n  normalizeGridArray,\r\n  getIndexArr,\r\n  isEqualArr\r\n};\r\n","import {removeElem} from \"./helpers\";\r\n\r\nfunction drawGrid(gridArray, elemCoefficient, gameOver) {\r\n  const field = document.querySelector(\".game-field\");\r\n  const fieldWidth = field.offsetWidth;\r\n  const fieldHeight = field.offsetHeight;\r\n\r\n  const elemRadius = elemCoefficient * 2 - 1;\r\n  const cellSize = fieldWidth / (elemCoefficient * 4 + 1);\r\n\r\n  const cellWidth = (cellSize * 2).toFixed(2);\r\n  const cellHeight = ((cellWidth * Math.sqrt(3)) / 2).toFixed(2);\r\n  const divElem = document.createElement(\"div\");\r\n  divElem.className = \"hex-grid\";\r\n  divElem.innerHTML = ``;\r\n\r\n  let cellClass = \"css-2\";\r\n\r\n  switch (elemCoefficient) {\r\n    case 2:\r\n      cellClass = \"css-3\";\r\n      break;\r\n    case 3:\r\n      cellClass = \"css-4\";\r\n  }\r\n\r\n  let x, y, z, value;\r\n  let posX, posY;\r\n  let centerX = fieldWidth / 2;\r\n  let centerY = fieldHeight / 2;\r\n\r\n  for (let i = 0; i < gridArray.length; i++) {\r\n    [x, y, z, value] = [\r\n      gridArray[i].x,\r\n      gridArray[i].y,\r\n      gridArray[i].z,\r\n      gridArray[i].value,\r\n    ];\r\n    posX = (x * 3 * cellWidth) / 4 + centerX - cellWidth / 2;\r\n    posY = ((z - y) * cellHeight) / 2 + centerY - cellHeight / 2;\r\n    divElem.innerHTML += `\r\n      <div class=\"${cellClass}\" \r\n        data-value=\"${value}\" \r\n        data-x=\"${x}\" \r\n        data-y=\"${y}\" \r\n        data-z=\"${z}\" \r\n        style=\"left: ${posX}px; top: ${posY}px;\">${value || \"\"}</div>\r\n      `;\r\n  }\r\n  if (!!document.querySelector(\".hex-grid\")) {\r\n    removeElem(\".hex-grid\");\r\n  }\r\n  field.append(divElem);\r\n  document.querySelector(\".game-status\").innerHTML = `Game Status: ${gameOver ? 'Game Over' : 'Playing'}`;\r\n}\r\n\r\nexport default drawGrid;\r\n","import serverComm from \"./serverComm\";\r\nimport drawGrid from \"./grawGrid\";\r\nimport {getRowArray, normalizeGridArray, getIndexArr, isEqualArr} from \"./helpers\";\r\n\r\nlet elemCoefficient = 1;\r\nlet hexGridArray = [];\r\nlet gameURL;\r\nlet gameOver = false;\r\nlet normalArray;\r\n\r\nfunction initField(inputRadius, data, reqURL) {\r\n  elemCoefficient = parseInt(inputRadius) - 1;\r\n  hexGridArray = generateField(elemCoefficient);\r\n  normalArray = JSON.parse(JSON.stringify(hexGridArray));\r\n  gameURL = reqURL;\r\n  updateCells(hexGridArray, data);\r\n  drawGrid(hexGridArray, elemCoefficient, gameOver);\r\n  return hexGridArray;\r\n}\r\n\r\nfunction generateField(elemCoefficient) {\r\n  const fieldSize = elemCoefficient;\r\n  const gridArray = [];\r\n  const value = 0;\r\n  for (let i = -fieldSize; i < fieldSize + 1; i++) {\r\n    for (let j = fieldSize; j > -fieldSize - 1; j--) {\r\n      for (let k = fieldSize; k > -fieldSize - 1; k--) {\r\n        if (i + j + k == 0) {\r\n          gridArray.push({\r\n            'x': i,\r\n            'y': j,\r\n            'z': k,\r\n            'value': value,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return gridArray;\r\n}\r\n\r\nfunction updateCells(gridArray, dataArray) {\r\n  gridArray.forEach((element) => {\r\n    dataArray.forEach((data) => {\r\n      const result =\r\n        element.x === data.x && element.y === data.y && element.z === data.z;\r\n      if (!!result) {\r\n        element.value = data.value;\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n// **\r\n// direction Boolean  - true for positive / false for negative\r\nfunction getMovedRow(rowArray, direction, axis) {\r\n  const moveArr = JSON.parse(JSON.stringify(rowArray));\r\n  const filteredInitArr = moveArr.filter(elem => elem.value > 0);\r\n  if (!filteredInitArr.length) return moveArr;\r\n  const valuesArray = filteredInitArr.length && filteredInitArr.map(elem => elem.value) || [];\r\n  const countZeroes = moveArr.length - valuesArray.length;\r\n  const zeroesArray = new Array(countZeroes).fill(0);\r\n  const newArray = direction ? [...valuesArray, ...zeroesArray] : [...zeroesArray, ...valuesArray];\r\n  for (const [index, value] of moveArr.entries()) {\r\n    value.value = newArray[index];\r\n  }\r\n  return moveArr;\r\n}\r\n\r\nfunction getCalculatedRow(rowArray, direction) {\r\n  const initArr = JSON.parse(JSON.stringify(rowArray));\r\n  if (direction) {\r\n    for (let i = initArr.length - 1; i > 0; i--) {\r\n      if (initArr[i].value === initArr[i - 1].value) {\r\n        initArr[i].value += initArr[i - 1].value;\r\n        initArr[i - 1].value = 0;\r\n      }\r\n    }\r\n  } else {\r\n    for (let i = 1; i < initArr.length; i++) {\r\n      if (initArr[i - 1].value === initArr[i].value) {\r\n        initArr[i - 1].value += initArr[i].value;\r\n        initArr[i].value = 0;\r\n      }\r\n    }\r\n  }\r\n  return initArr;\r\n}\r\n\r\nfunction generateNewArray(axis, fieldRadius, direction, incomingArray, resultArray, changeFunction) {\r\n  const indexArr = getIndexArr(fieldRadius);\r\n  const rawArray = [];\r\n  for (let indexVal of indexArr) {\r\n    let rowArray = getRowArray(axis, indexVal, incomingArray);\r\n    let bufferRow = changeFunction(rowArray, direction, axis);\r\n    rawArray.push(...bufferRow);\r\n  }\r\n  let normalizedArray = normalizeGridArray(rawArray, normalArray);\r\n  resultArray.push(...normalizedArray);\r\n}\r\n\r\nfunction getUpdate(axis, fieldRadius, direction) {\r\n  const options = [axis, fieldRadius, direction]\r\n  let movedHexGridArray = [];\r\n  let calculatedHexGridArray = [];\r\n  let updatedHexGridArray = [];\r\n  generateNewArray(...options, hexGridArray, movedHexGridArray, getMovedRow);\r\n  generateNewArray(...options, movedHexGridArray, calculatedHexGridArray, getCalculatedRow);\r\n  // check changes in cells array\r\n  if (isEqualArr(calculatedHexGridArray, hexGridArray)) {\r\n    return;\r\n  }\r\n  generateNewArray(...options, calculatedHexGridArray, updatedHexGridArray, getMovedRow);\r\n\r\n  addNewCellData(updatedHexGridArray).then(result => {\r\n    hexGridArray = result;\r\n    gameOver = gameOverCheck(hexGridArray, fieldRadius);\r\n    drawGrid(hexGridArray, elemCoefficient, gameOver);\r\n  });\r\n}\r\n\r\nfunction addNewCellData(incomingArray) {\r\n  let newArray = serverComm(gameURL, incomingArray.filter(elem => elem.value > 0)).then(result => {\r\n    incomingArray.map(elem => {\r\n      result.forEach(data => {\r\n        const result =\r\n          elem.x === data.x && elem.y === data.y && elem.z === data.z;\r\n        if (!!result) {\r\n          elem.value = data.value;\r\n        }\r\n      });\r\n    });\r\n    return incomingArray;\r\n  })\r\n  return newArray;\r\n}\r\n\r\nfunction gameOverCheck(incomingArray, fieldRadius) {\r\n  let count = 0;\r\n  const indexArr = getIndexArr(fieldRadius)\r\n\r\n  for (let axis of ['x', 'y', 'z'])\r\n    for (let indexVal of indexArr) {\r\n      let rowArray = getRowArray(axis, indexVal, incomingArray);\r\n      for (let i = 1; i < rowArray.length; i++) {\r\n        if (rowArray[i].value === rowArray[i - 1].value || rowArray[i].value === 0) {\r\n          count++\r\n        };\r\n      }\r\n    }\r\n  return !count;\r\n}\r\n\r\nexport {\r\n  initField,\r\n  updateCells,\r\n  drawGrid,\r\n  getUpdate\r\n};\r\n","import serverComm from \"./modules/serverComm\";\r\nimport {initField as gameField, getUpdate} from \"./modules/gameField\";\r\n\r\nconst baseURL = \"http://51.15.207.127:13337\";\r\nlet fieldData = [];\r\nlet fieldRadius;\r\nlet hexGridArray = [];\r\n\r\nconst body = document.querySelector(\"body\");\r\nbody.addEventListener(\"click\", function (e) {\r\n  const target = e.target;\r\n  if (!!target.closest(\".radius-btn\")) {\r\n    fieldRadius = target.value;\r\n    initialDataReq(target);\r\n  }\r\n});\r\n\r\nfunction initialDataReq(target) {\r\n  const reqURL = `${baseURL}/${target.value}`;\r\n\r\n  serverComm(reqURL, fieldData).then((result) =>\r\n    hexGridArray = gameField(target.value, result, reqURL)\r\n  );\r\n}\r\n\r\nfunction getDirection(e) {\r\n  switch (e.code) {\r\n    case \"KeyW\":\r\n      hexGridArray = getUpdate(\"x\", fieldRadius, 1);\r\n      break;\r\n    case \"KeyS\":\r\n      hexGridArray = getUpdate(\"x\", fieldRadius, 0);\r\n      break;\r\n    case \"KeyE\":\r\n      hexGridArray = getUpdate(\"y\", fieldRadius, 0);\r\n      break;\r\n    case \"KeyA\":\r\n      hexGridArray = getUpdate(\"y\", fieldRadius, 1);\r\n      break;\r\n    case \"KeyQ\":\r\n      hexGridArray = getUpdate(\"z\", fieldRadius, 1);\r\n      break;\r\n    case \"KeyD\":\r\n      hexGridArray = getUpdate(\"z\", fieldRadius, 0);\r\n      break;\r\n    default:\r\n      return;\r\n  }\r\n}\r\n\r\ndocument.addEventListener(\"keydown\", getDirection);\r\n"]}